#!/bin/sh
#PBS -N unit_mcf
#PBS -l nodes=1:ppn=3
#PBS -o logs/$PBS_JOBNAME.out
#PBS -j oe
#PBS -V
  
cd $PBS_O_WORKDIR


savetag=""
#statistics=("mcf")
#statistics=("upf")
statistics=("marks" "mcf")
#statistics=("wp")

#statistics=("wp xi")
overwrite=true

workdir=$PBS_O_WORKDIR

# mock names
mockdir="/mount/sirocco2/zz681/emulator/CMASSLOWZ_SHAM_Joe/UNIT/1Gpc"
mocknamebase="Clustering_catalog_hlist_0.64210.list.sham"
mocknametags=("_fixedAmp_001_" "_fixedAmp_002_" "_fixedAmp_InvPhase_001_" "_fixedAmp_InvPhase_002_")
mocktag="_unit"

# parameters (from http://skiesanduniverses.org/Simulations/Uchuu/)
L=1000.0 #Mpc/h # per box! careful if using for volume elsewhere
Omega_m=0.3089 #planck, http://www.unitsims.org/; same as uchuu
w=-1
redshift=0.55 #???

# Initialize all stat parameters to -1
# (will set them by statistic)
r_min=-1
r_max=-1
n_radii=-1
n_spheres=-1
density_threshold_frac=-1
radius=-1
factor_star=-1
p=-1

for statistic in ${statistics[@]}; do

  result_dir="/home/users/ksf293/clust/results${mocktag}/results_${statistic}"
  mkdir -p ${result_dir}

  for mocknametag in ${mocknametags[@]}; do

     mockname="${mocknamebase}${mocknametag}.dat"
     fn_save="${result_dir}/${statistic}${mocktag}${mocknametag}.dat"

     if [ ! -f $fn_save ] || [ "$overwrite" == "true" ]; then
       echo "Computing $statistic for mock; saving to $fn_save"
     
       if [ $statistic = "upf" ]; then
         r_min=5 
         r_max=45
         n_radii=9
         n_spheres=1000000 #1e6
         density_threshold_frac=0.2
         fn_ngalsmean=$PBS_O_WORKDIR/numgals/mean_numgals${mocktag}.dat
         echo "$PBS_O_WORKDIR/run_statistics_mock $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $fn_ngalsmean $r_min $r_max $n_radii $n_spheres $density_threshold_frac $radius $factor_star $p"

         $PBS_O_WORKDIR/run_statistics_mock $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $fn_ngalsmean $r_min $r_max $n_radii $n_spheres $density_threshold_frac $radius $factor_star $p 
       fi
       if [ $statistic = "marks" ]; then
         radius=10.0 
         factor_star=8.0
         p=1.0
         fn_ngalsmean=$PBS_O_WORKDIR/numgals/mean_numgals${mocktag}.dat
         echo "$PBS_O_WORKDIR/run_statistics_mock $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $fn_ngalsmean $r_min $r_max $n_radii $n_spheres $density_threshold_frac $radius $factor_star $p"

         $PBS_O_WORKDIR/run_statistics_mock $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $fn_ngalsmean $r_min $r_max $n_radii $n_spheres $density_threshold_frac $radius $factor_star $p 
       fi
       if [ $statistic = "wp" ] || [ $statistic = "wp80" ]; then
         r_min=0.1
         r_max=50.0
         n_radii=9 #n_bins
         if [ $statistic = "wp80" ]; then
           pi_max=80.0
         else
           pi_max=40.0
         fi
         echo "python run_statistics_mock.py $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $r_min $r_max $n_radii -pi_max=$pi_max"
         python run_statistics_mock.py $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $r_min $r_max $n_radii -pi_max=$pi_max 
       fi
       if [ $statistic = "xi" ] || [ $statistic = "xi2" ]; then
         r_min=0.1
         r_max=50.0
         n_radii=9 #n_bins
         echo "python run_statistics_mock.py $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $r_min $r_max $n_radii"
         python run_statistics_mock.py $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $r_min $r_max $n_radii 
       fi
       if [ $statistic = "mcf" ]; then
         r_min=0.1
         r_max=50.0
         n_radii=9 #n_bins
         markdir="/home/users/ksf293/clust/results${mocktag}/results_marks"
         fn_marks=${markdir}/marks${mocktag}${mocknametag}.dat
         
         echo "python run_statistics_mock.py $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $r_min $r_max $n_radii -fn_marks=$fn_marks"
         python run_statistics_mock.py $mockdir/$mockname $L $Omega_m $w $redshift $statistic $fn_save $r_min $r_max $n_radii -fn_marks=$fn_marks
       fi

     else
       echo "File $fn_save already exists! Skipping $statistic"
     fi 

  done
done
