#!/bin/sh
#PBS -N knn3_train

# nodes and processes per job
# knn: max 1 - 30s, 5.5GB. max 2 - 47s, 7GB. max 3 - 60s, 8.3GB
# knn tree with orders=[1,2,3] takes 8.3GB for single; nodes have 60GB, 24 cores.
# so should set ppn=4, so then load core with max of (24/4)*8.3GB=50GB (6 per node)
#PBS -l nodes=1:ppn=4

# input values 0-3999 (40 cosmo x 100 hod per cosmo = 4000)
# 0-3999: 100 hod per cosmo
# %100: only ever run 100 at a time
#PBS -t 0-399%36

#PBS -o logs/$PBS_JOBNAME.out
#PBS -j oe
#PBS -V
  
cd $PBS_O_WORKDIR

echo "Hello from ${PBS_ARRAYID} ..."
# TRAIN FROM SUBSAMPLE
declare -i cosmo_id #need to declare variables to do arithmetic
declare -i hod_id
declare -i nhodpercosmo
declare -i nhodnonolap
nhodpercosmo=10 #can change this to get more (up to nhodnonolap)
nhodnonolap=100 #number of hods per cosmology, nonoverlapping, that exist
#cosmo is line in file
cosmo_id=$((PBS_ARRAYID/nhodpercosmo))
hod_id=$(( (cosmo_id*nhodnonolap)+PBS_ARRAYID%nhodpercosmo ))
echo "cosmo ${cosmo_id}, hod ${hod_id}"

#statistics=("marks" "mcf")
statistics=("knn")
overwrite=false

# Set parameters
L=1050.0
redshift=0.57
knn_order_max=3

# Initialize all stat parameters to -1
r_min=-1
r_max=-1
n_radii=-1
n_spheres=-1
density_threshold_frac=-1
radius=-1
factor_star=-1 #8.0
p=-1 #1.0

workdir=$PBS_O_WORKDIR
test=0
cosmofn=/mount/sirocco1/zz681/emulator/CMASS/Gaussian_Process/hod_file/cosmology_camb_full.dat

for statistic in ${statistics[@]}; do

  result_dir="/home/users/ksf293/clust/results_aemulus_train/results_$statistic"
  if [ $statistic = "knn" ]; then
    for knn_order in $(seq 1 ${knn_order_max})
    do
        result_dir_order=${result_dir}${knn_order}
        echo ${result_dir_order}
        mkdir -p ${result_dir_order}
    done
  else
    mkdir -p "${result_dir}"
  fi
  # TODO: check if fn_save_order_max exists, if so don't compute
  fn_save=${result_dir}/${statistic}_cosmo_${cosmo_id}_HOD_${hod_id}_test_0.dat

  # NOTE: for knn, will always overwrite, bc of how set up
  if [ ! -f $fn_save ] || [ $overwrite = true ]; then
    echo "Computing $statistic of cosmo ${cosmo_id} hod ${hod_id}"
    mockdir=/mount/sirocco2/zz681/emulator/CMASSLOWZ/galaxy_mocks/mocks
    mockname=mock_cosmo_${cosmo_id}_HOD_${hod_id}_test_${test}.mock
    
    if [ $statistic = "upf" ]; then
      ## TODO: implement like in run_statistics_mock.c (as for glam)
      meanngalsfn=$workdir/numgals/mean_numgals_training_nonolap.dat
      $workdir/upf_zspace $mockdir/$mockname 5 45 9 ${fn_save} $meanngalsfn $cosmofn ${cosmo_id}
    fi
    if [ $statistic = "vpf" ]; then
      ## TODO: implement like in run_statistics_mock.c (as for glam)
      meanngalsfn=$workdir/numgals/zero.dat
      $workdir/upf_zspace $mockdir/$mockname 5 45 9 ${fn_save} $meanngalsfn $cosmofn ${cosmo_id}
    fi
    if [ $statistic = "marks" ]; then
      ## TODO: implement like in run_statistics_mock.c (as for glam)
      echo "$workdir/marks_zspace $mockdir/$mockname ${fn_save} $meanngalsfn $cosmofn ${cosmo_id} $factor_star $p"
      meanngalsfn=$workdir/numgals/mean_numgals_training_nonolap.dat
      $workdir/marks_zspace $mockdir/$mockname ${fn_save} $meanngalsfn $cosmofn ${cosmo_id} $factor_star $p
    fi
    if [ $statistic = "wp" ] || [ $statistic = "xi" ] || [ $statistic = "xi2" ]; then
      r_min=0.1
      r_max=50.0
      n_radii=9 #n_bins
      echo "python run_statistics_aemulus.py $mockdir/$mockname $L $cosmofn ${cosmo_id} $redshift $statistic ${fn_save} $r_min $r_max $n_radii"
      python run_statistics_aemulus.py $mockdir/$mockname $L $cosmofn ${cosmo_id} $redshift $statistic ${fn_save} $r_min $r_max $n_radii 
    fi
    if [ $statistic = "mcf" ]; then
      r_min=0.1
      r_max=50.0
      n_radii=9 #n_bins
      markdir=$workdir/results_marks/training_marks${marktag}
      fn_marks=${markdir}/marks_cosmo_${cosmo_id}_HOD_${hod_id}_test_${test}.dat
      
      echo "python run_statistics_aemulus.py $mockdir/$mockname $L $cosmofn ${cosmo_id} $redshift $statistic ${fn_save} $r_min $r_max $n_radii -fn_marks=$fn_marks"
      python run_statistics_aemulus.py $mockdir/$mockname $L $cosmofn ${cosmo_id} $redshift $statistic ${fn_save} $r_min $r_max $n_radii -fn_marks=$fn_marks
    fi
      if [ $statistic = "knn" ]; then
      r_min=0.1
      r_max=50.0
      n_radii=9 #n_bins
      echo "python run_statistics_aemulus.py $mockdir/$mockname $L $cosmofn $cosmo_id $redshift $statistic ${fn_save} $r_min $r_max $n_radii"
      python run_statistics_aemulus.py $mockdir/$mockname $L $cosmofn $cosmo_id $redshift $statistic ${fn_save} $r_min $r_max $n_radii -knn_order_max=$knn_order_max
    fi
  fi
done
